{"ast":null,"code":"const readline = require(\"readline-sync\");\n\nconst input = readline.question('What phrase would you like to encrypt? ').toLowerCase();\nconsole.log(input);\nvar shift = parseInt(readline.question('How many letters would you like to shift? '));\nconsole.log(shift);\n\nfunction cipher(str, num) {\n  num = num % 26;\n  var lowerCaseString = str.toLowerCase();\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  var newStr = '';\n\n  for (let i = 0; i < lowerCaseString.length; i++) {\n    var currentLetter = lowerCaseString[i];\n\n    if (currentLetter === ' ') {\n      newStr += currentLetter;\n      continue;\n    }\n\n    var currentIndex = alphabet.indexOf(currentLetter);\n    var newIndex = currentIndex + num;\n    if (newIndex > 25) newIndex = newIndex - 26;\n    if (newIndex < 0) newIndex = newIndex + 26;\n\n    if (str[i] === str[i].toUpperCase()) {\n      newStr += alphabet[newIndex].toUpperCase();\n    } else newStr += alphabet[newIndex];\n  }\n\n  console.log(newStr);\n}\n\ncipher(input, shift);","map":{"version":3,"names":["readline","require","input","question","toLowerCase","console","log","shift","parseInt","cipher","str","num","lowerCaseString","alphabet","split","newStr","i","length","currentLetter","currentIndex","indexOf","newIndex","toUpperCase"],"sources":["/home/undrew/development/assignments/level-3/ceaser/my-app/src/App.js"],"sourcesContent":["const readline = require(\"readline-sync\");\nconst input = readline.question('What phrase would you like to encrypt? ').toLowerCase();\n\nconsole.log(input)\n\nvar shift = parseInt(readline.question('How many letters would you like to shift? '));\n\nconsole.log(shift)\n\nfunction cipher (str, num){\n    num = num % 26;\n    var lowerCaseString = str.toLowerCase()\n    var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')\n    var newStr = ''\n    for (let i = 0; i < lowerCaseString.length; i++){\n        var currentLetter = lowerCaseString[i]\n        if (currentLetter === ' '){\n            newStr += currentLetter\n            continue\n        }\n        var currentIndex = alphabet.indexOf(currentLetter)\n        var newIndex = currentIndex + num;\n        if (newIndex > 25) newIndex = newIndex - 26\n        if (newIndex < 0) newIndex = newIndex + 26\n        if (str[i] === str[i].toUpperCase()){\n            newStr += alphabet[newIndex].toUpperCase()\n        }\n        else newStr += alphabet[newIndex]\n    }\n    console.log(newStr)\n}\ncipher(input, shift)"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAxB;;AACA,MAAMC,KAAK,GAAGF,QAAQ,CAACG,QAAT,CAAkB,yCAAlB,EAA6DC,WAA7D,EAAd;AAEAC,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAEA,IAAIK,KAAK,GAAGC,QAAQ,CAACR,QAAQ,CAACG,QAAT,CAAkB,4CAAlB,CAAD,CAApB;AAEAE,OAAO,CAACC,GAAR,CAAYC,KAAZ;;AAEA,SAASE,MAAT,CAAiBC,GAAjB,EAAsBC,GAAtB,EAA0B;EACtBA,GAAG,GAAGA,GAAG,GAAG,EAAZ;EACA,IAAIC,eAAe,GAAGF,GAAG,CAACN,WAAJ,EAAtB;EACA,IAAIS,QAAQ,GAAG,6BAA6BC,KAA7B,CAAmC,EAAnC,CAAf;EACA,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,eAAe,CAACK,MAApC,EAA4CD,CAAC,EAA7C,EAAgD;IAC5C,IAAIE,aAAa,GAAGN,eAAe,CAACI,CAAD,CAAnC;;IACA,IAAIE,aAAa,KAAK,GAAtB,EAA0B;MACtBH,MAAM,IAAIG,aAAV;MACA;IACH;;IACD,IAAIC,YAAY,GAAGN,QAAQ,CAACO,OAAT,CAAiBF,aAAjB,CAAnB;IACA,IAAIG,QAAQ,GAAGF,YAAY,GAAGR,GAA9B;IACA,IAAIU,QAAQ,GAAG,EAAf,EAAmBA,QAAQ,GAAGA,QAAQ,GAAG,EAAtB;IACnB,IAAIA,QAAQ,GAAG,CAAf,EAAkBA,QAAQ,GAAGA,QAAQ,GAAG,EAAtB;;IAClB,IAAIX,GAAG,CAACM,CAAD,CAAH,KAAWN,GAAG,CAACM,CAAD,CAAH,CAAOM,WAAP,EAAf,EAAoC;MAChCP,MAAM,IAAIF,QAAQ,CAACQ,QAAD,CAAR,CAAmBC,WAAnB,EAAV;IACH,CAFD,MAGKP,MAAM,IAAIF,QAAQ,CAACQ,QAAD,CAAlB;EACR;;EACDhB,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACH;;AACDN,MAAM,CAACP,KAAD,EAAQK,KAAR,CAAN"},"metadata":{},"sourceType":"module"}